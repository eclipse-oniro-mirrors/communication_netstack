[1mdiff --git a/bundle.json b/bundle.json[m
[1mindex 7d66110..6c711b9 100644[m
[1m--- a/bundle.json[m
[1m+++ b/bundle.json[m
[36m@@ -61,7 +61,8 @@[m
             "test": [[m
                 "//foundation/communication/netstack/test/fuzztest/socket:fuzztest",[m
                 "//foundation/communication/netstack/test/unittest/http/cache:unittest",[m
[31m-                "//foundation/communication/netstack/test/unittest/tlssocket:unittest"[m
[32m+[m[32m                "//foundation/communication/netstack/test/unittest/tlssocket:unittest",[m
[32m+[m[32m                "//foundation/communication/netstack/test/unittest/utils/common_utils:unittest"[m
             ][m
         }[m
     }[m
[1mdiff --git a/test/unittest/tlssocket/BUILD.gn b/test/unittest/tlssocket/BUILD.gn[m
[1mindex 64ec2a5..d35c360 100644[m
[1m--- a/test/unittest/tlssocket/BUILD.gn[m
[1m+++ b/test/unittest/tlssocket/BUILD.gn[m
[36m@@ -17,11 +17,12 @@[m [mgroup("unittest") {[m
   testonly = true[m
   deps = [[m
     "client:secure_data_unittest",[m
[31m-    "client:tls_socket_certchain_unittest",[m
[31m-    "client:tls_socket_unittest",[m
     "client:socket_error_unittest",[m
     "client:tls_cert_test",[m
     "client:tls_configuration_test",[m
     "client:tls_key_test",[m
[32m+[m[32m    "client:tls_socket_branch_test",[m
[32m+[m[32m    "client:tls_socket_certchain_unittest",[m
[32m+[m[32m    "client:tls_socket_unittest",[m
   ][m
 }[m
[1mdiff --git a/test/unittest/tlssocket/client/BUILD.gn b/test/unittest/tlssocket/client/BUILD.gn[m
[1mindex 5863551..7d83006 100644[m
[1m--- a/test/unittest/tlssocket/client/BUILD.gn[m
[1m+++ b/test/unittest/tlssocket/client/BUILD.gn[m
[36m@@ -271,3 +271,28 @@[m [mohos_unittest("socket_error_unittest") {[m
   part_name = "netstack"[m
   subsystem_name = "communication"[m
 }[m
[32m+[m
[32m+[m[32mohos_unittest("tls_socket_branch_test") {[m
[32m+[m[32m  sources = [ "TlsSocketBranchTest.cpp" ][m
[32m+[m[32m  sources += tls_sources[m
[32m+[m[32m  sources += tls_napi_sources[m
[32m+[m[32m  sources += socket_sources[m
[32m+[m
[32m+[m[32m  configs = [ ":tls_test_config" ][m
[32m+[m
[32m+[m[32m  deps = [[m
[32m+[m[32m    "$NETSTACK_DIR/utils:stack_utils_common",[m
[32m+[m[32m    "$NETSTACK_DIR/utils/napi_utils:napi_utils",[m
[32m+[m[32m    "$THIRD_PARTY_ROOT/openssl:libcrypto_shared",[m
[32m+[m[32m    "$THIRD_PARTY_ROOT/openssl:libssl_shared",[m
[32m+[m[32m  ][m
[32m+[m[32m  external_deps = [[m
[32m+[m[32m    "c_utils:utils",[m
[32m+[m[32m    "hiviewdfx_hilog_native:libhilog",[m
[32m+[m[32m    "napi:ace_napi",[m
[32m+[m[32m  ][m
[32m+[m
[32m+[m[32m  module_out_path = "netstack/tls_socket_unittest"[m
[32m+[m[32m  part_name = "netstack"[m
[32m+[m[32m  subsystem_name = "communication"[m
[32m+[m[32m}[m
[1mdiff --git a/test/unittest/tlssocket/client/TlsSocketBranchTest.cpp b/test/unittest/tlssocket/client/TlsSocketBranchTest.cpp[m
[1mindex 98d4d03..dac486f 100644[m
[1m--- a/test/unittest/tlssocket/client/TlsSocketBranchTest.cpp[m
[1m+++ b/test/unittest/tlssocket/client/TlsSocketBranchTest.cpp[m
[36m@@ -1,3 +1,330 @@[m
[31m-//[m
[31m-// Created by ts on 2022/12/3.[m
[31m-//[m
[32m+[m[32m/*[m
[32m+[m[32m * Copyright (c) 2022 Huawei Device Co., Ltd.[m
[32m+[m[32m * Licensed under the Apache License, Version 2.0 (the "License");[m
[32m+[m[32m * you may not use this file except in compliance with the License.[m
[32m+[m[32m * You may obtain a copy of the License at[m
[32m+[m[32m *[m
[32m+[m[32m *     http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m *[m
[32m+[m[32m * Unless required by applicable law or agreed to in writing, software[m
[32m+[m[32m * distributed under the License is distributed on an "AS IS" BASIS,[m
[32m+[m[32m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[m
[32m+[m[32m * See the License for the specific language governing permissions and[m
[32m+[m[32m * limitations under the License.[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m#include <gtest/gtest.h>[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32m#include "tls_socket.h"[m
[32m+[m
[32m+[m[32mnamespace OHOS {[m
[32m+[m[32mnamespace NetStack {[m
[32m+[m[32mnamespace {[m
[32m+[m[32musing namespace testing::ext;[m
[32m+[m[32mstatic constexpr const char *KEY_PASS = "";[m
[32m+[m[32mstatic constexpr const char *PROTOCOL_V_1_2 = "TLSv1.2";[m
[32m+[m[32mstatic constexpr const char *PROTOCOL_V_1_3 = "TLSv1.3";[m
[32m+[m[32mstatic constexpr const char *IP_ADDRESS = "127.0.0.1";[m
[32m+[m[32mstatic constexpr const char *ALPN_PROTOCOL = "http/1.1";[m
[32m+[m[32mstatic constexpr const char *SIGNATURE_ALGORITHM = "rsa_pss_rsae_sha256:ECDSA+SHA256";[m
[32m+[m[32mstatic constexpr const char *CIPHER_SUITE = "AES256-SHA256";[m
[32m+[m[32mconst int PORT = 7838;[m
[32m+[m[32mstatic char g_clientFile[] =[m
[32m+[m[32m"-----BEGIN CERTIFICATE-----\r\n"[m
[32m+[m[32m"MIIDezCCAmMCFD6h5R4QvySV9q9mC6s31qQFLX14MA0GCSqGSIb3DQEBCwUAMHgx\r\n"[m
[32m+[m[32m"CzAJBgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCU1oxDDAKBgNVBAoM\r\n"[m
[32m+[m[32m"A0NPTTEMMAoGA1UECwwDTlNQMQswCQYDVQQDDAJDQTEmMCQGCSqGSIb3DQEJARYX\r\n"[m
[32m+[m[32m"emhhbmd6aGV3ZWkwMTAzQDE2My5jb20wHhcNMjIwNDI0MDIwMjU3WhcNMjMwNDI0\r\n"[m
[32m+[m[32m"MDIwMjU3WjB8MQswCQYDVQQGEwJDTjELMAkGA1UECAwCR0QxCzAJBgNVBAcMAlNa\r\n"[m
[32m+[m[32m"MQwwCgYDVQQKDANDT00xDDAKBgNVBAsMA05TUDEPMA0GA1UEAwwGQ0xJRU5UMSYw\r\n"[m
[32m+[m[32m"JAYJKoZIhvcNAQkBFhd6aGFuZ3poZXdlaTAxMDNAMTYzLmNvbTCCASIwDQYJKoZI\r\n"[m
[32m+[m[32m"hvcNAQEBBQADggEPADCCAQoCggEBAKlc63+j5C7tLoaecpdhzzZtLy8iNSi6oLHc\r\n"[m
[32m+[m[32m"+bPib1XWz1zcQ4On5ncGuuLSV2Tyse4tSsDbPycd8b9Teq6gdGrvirtGXau82zAq\r\n"[m
[32m+[m[32m"no+t0mxVtV1r0OkSe+hnIrYKxTE5UDeAM319MSxWlCR0bg0uEAuVBPQpld5A9PQT\r\n"[m
[32m+[m[32m"YCLbv4cTwB0sIKupsnNbrn2AsAlCFd288XeuTN+N87m05cDkprAkqkCJfAtRnejV\r\n"[m
[32m+[m[32m"k+vbS+H6toR3P9PVQJXC77oM7cDOjR8AwpkRRA890XUWoQLwhHXvDpGPwKK+lLnG\r\n"[m
[32m+[m[32m"FswiaHy3silUIOidwk7E/81BOqXSk77oUG6UQrVilkmu6g79VssCAwEAATANBgkq\r\n"[m
[32m+[m[32m"hkiG9w0BAQsFAAOCAQEAOeqp+hFVRs4YB3UjU/3bvAUFQLS97gapCp2lk6jS88jt\r\n"[m
[32m+[m[32m"uNeyvwulOAtZEbcoIIvzzNxvBDOVibTJ6gZU9P9g0WyRu2RTgy+UggNwH8u8KZzM\r\n"[m
[32m+[m[32m"DT8sxuoYvRcEWbOhlNQgACa7AlQSLQifo8nvEMS2i9o8WHoHu42MRDYOHYVIwWXH\r\n"[m
[32m+[m[32m"h6mZzfo+zrPyv3NFlwlWqaNiTGgnGCXzlVK3p5YYqLbNVYpy0U5FBxQ7fITsqcbK\r\n"[m
[32m+[m[32m"PusAAEZzPxm8Epo647M28gNkdEEM/7bqhSTJO+jfkojgyQt2ghlw+NGCmG4dJGZb\r\n"[m
[32m+[m[32m"yA7Z3PBj8aqEwmRUF8SAR1bxWBGk2IYRwgStuwvusg==\r\n"[m
[32m+[m[32m"-----END CERTIFICATE-----\r\n";[m
[32m+[m
[32m+[m[32mstatic char g_caCrtFile[] =[m
[32m+[m[32m"Certificate:\r\n"[m
[32m+[m[32m"   Data:\r\n"[m
[32m+[m[32m"        Version: 3 (0x2)\r\n"[m
[32m+[m[32m"        Serial Number: 1 (0x1)\r\n"[m
[32m+[m[32m"        Signature Algorithm: sha256WithRSAEncryption\r\n"[m
[32m+[m[32m"        Issuer: C=CN, ST=beijing, O=Global Google CA Inc, OU=Root CA, CN=Global Google Root CA\r\n"[m
[32m+[m[32m"        Validity\r\n"[m
[32m+[m[32m"            Not Before: Aug 23 07:33:55 2022 GMT\r\n"[m
[32m+[m[32m"            Not After : Aug 23 07:33:55 2023 GMT\r\n"[m
[32m+[m[32m"        Subject: C=CN, ST=beijing, O=Global Google CA Inc, OU=Root CA, CN=Global Google Root CA\r\n"[m
[32m+[m[32m"        Subject Public Key Info:\r\n"[m
[32m+[m[32m"            Public Key Algorithm: rsaEncryption\r\n"[m
[32m+[m[32m"                RSA Public-Key: (2048 bit)\r\n"[m
[32m+[m[32m"                Modulus:\r\n"[m
[32m+[m[32m"                    00:9d:df:68:f7:7b:78:0b:21:f3:6f:24:60:ef:ce:\r\n"[m
[32m+[m[32m"                    02:90:24:df:c4:d3:f3:e4:26:6c:c7:12:bf:28:cd:\r\n"[m
[32m+[m[32m"                    38:2d:3f:ab:76:11:64:ce:6b:f6:07:fd:35:1e:b9:\r\n"[m
[32m+[m[32m"                    ec:22:72:03:4d:eb:d2:94:49:2d:82:44:6c:72:59:\r\n"[m
[32m+[m[32m"                    14:ab:e7:0c:72:32:3e:ad:fa:9d:52:da:24:8d:e9:\r\n"[m
[32m+[m[32m"                    a4:10:d7:dd:34:66:df:7e:e0:0e:66:53:8b:ee:91:\r\n"[m
[32m+[m[32m"                    07:9a:ce:2a:85:25:09:77:3d:5f:75:1c:a1:b3:ab:\r\n"[m
[32m+[m[32m"                    86:3b:21:28:f8:43:aa:f0:0b:7d:4d:f9:df:85:33:\r\n"[m
[32m+[m[32m"                    4a:3b:ff:e4:03:59:25:62:a1:e9:da:92:63:02:93:\r\n"[m
[32m+[m[32m"                    bd:f9:df:6e:c6:57:a7:d2:e6:7b:37:14:a9:ba:69:\r\n"[m
[32m+[m[32m"                    71:0c:c5:4f:66:fe:67:66:5c:8d:d7:04:4d:d8:f3:\r\n"[m
[32m+[m[32m"                    0b:c0:0b:7d:49:eb:68:94:28:f6:31:0f:0d:2a:03:\r\n"[m
[32m+[m[32m"                    70:a7:97:f9:38:90:36:d4:4b:39:4b:53:a5:2c:32:\r\n"[m
[32m+[m[32m"                    72:f2:41:86:32:13:3c:40:2d:3f:e8:63:d3:8c:8a:\r\n"[m
[32m+[m[32m"                    83:79:d3:20:f6:bc:cd:97:3e:94:91:4e:3c:74:8d:\r\n"[m
[32m+[m[32m"                    9a:fa:29:de:c4:a5:f7:e1:e2:06:55:e6:6c:41:0f:\r\n"[m
[32m+[m[32m"                    60:3b:90:de:3a:84:ef:3a:77:79:27:00:23:55:66:\r\n"[m
[32m+[m[32m"                    ca:81\r\n"[m
[32m+[m[32m"                Exponent: 65537 (0x10001)\r\n"[m
[32m+[m[32m"        X509v3 extensions:\r\n"[m
[32m+[m[32m"            X509v3 Basic Constraints:\r\n"[m
[32m+[m[32m"                CA:TRUE\r\n"[m
[32m+[m[32m"        Signature Algorithm: sha256WithRSAEncryption\r\n"[m
[32m+[m[32m"            61:3e:39:71:7f:b1:50:dd:71:97:cd:dc:a9:4b:72:96:0a:12:\r\n"[m
[32m+[m[32m"            c1:18:fd:35:b5:e0:97:1b:76:58:22:8d:cd:75:51:0f:ba:04:\r\n"[m
[32m+[m[32m"            00:94:6a:46:d5:3a:c5:ac:ea:7d:9c:ec:6f:19:b6:f1:2b:06:\r\n"[m
[32m+[m[32m"            e9:bb:cb:49:24:34:0b:55:bd:02:19:24:19:85:bb:e4:a4:80:\r\n"[m
[32m+[m[32m"            f4:d6:90:82:7e:81:5c:9b:89:d4:15:ed:3a:b7:a2:37:59:40:\r\n"[m
[32m+[m[32m"            db:b4:18:25:90:2e:ae:82:f9:a8:0c:9d:bd:c7:8c:54:85:ed:\r\n"[m
[32m+[m[32m"            07:d1:70:1d:ee:a1:92:bd:12:97:83:4d:9e:9e:b7:01:b5:56:\r\n"[m
[32m+[m[32m"            a5:1f:31:6e:a1:48:68:a4:4f:1c:fa:b0:38:27:47:12:eb:55:\r\n"[m
[32m+[m[32m"            a3:45:f7:e3:18:ba:d7:85:3c:1f:2c:1e:5e:38:75:5e:80:8a:\r\n"[m
[32m+[m[32m"            fd:1c:84:4f:9b:ef:85:b7:79:89:d7:43:eb:d4:fb:c5:51:5b:\r\n"[m
[32m+[m[32m"            84:6f:0e:06:32:54:13:e4:a7:e2:20:2d:b8:fa:2d:09:f8:8f:\r\n"[m
[32m+[m[32m"            dd:01:19:39:cc:23:c0:d1:39:19:9a:f7:7c:53:63:bf:ea:be:\r\n"[m
[32m+[m[32m"            04:9b:af:3e:6e:1e:77:c8:b9:0b:78:e9:0e:62:a7:51:db:1e:\r\n"[m
[32m+[m[32m"            c0:63:4d:4d:14:ff:ca:44:7f:15:e4:fa:98:1e:3d:58:c2:b6:\r\n"[m
[32m+[m[32m"            5a:64:68:d0\r\n"[m
[32m+[m[32m"-----BEGIN CERTIFICATE-----\r\n"[m
[32m+[m[32m"MIIDazCCAlOgAwIBAgIBATANBgkqhkiG9w0BAQsFADBwMQswCQYDVQQGEwJDTjEQ\r\n"[m
[32m+[m[32m"MA4GA1UECAwHYmVpamluZzEdMBsGA1UECgwUR2xvYmFsIEdvb2dsZSBDQSBJbmMx\r\n"[m
[32m+[m[32m"EDAOBgNVBAsMB1Jvb3QgQ0ExHjAcBgNVBAMMFUdsb2JhbCBHb29nbGUgUm9vdCBD\r\n"[m
[32m+[m[32m"QTAeFw0yMjA4MjMwNzMzNTVaFw0yMzA4MjMwNzMzNTVaMHAxCzAJBgNVBAYTAkNO\r\n"[m
[32m+[m[32m"MRAwDgYDVQQIDAdiZWlqaW5nMR0wGwYDVQQKDBRHbG9iYWwgR29vZ2xlIENBIElu\r\n"[m
[32m+[m[32m"YzEQMA4GA1UECwwHUm9vdCBDQTEeMBwGA1UEAwwVR2xvYmFsIEdvb2dsZSBSb290\r\n"[m
[32m+[m[32m"IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnd9o93t4CyHzbyRg\r\n"[m
[32m+[m[32m"784CkCTfxNPz5CZsxxK/KM04LT+rdhFkzmv2B/01HrnsInIDTevSlEktgkRsclkU\r\n"[m
[32m+[m[32m"q+cMcjI+rfqdUtokjemkENfdNGbffuAOZlOL7pEHms4qhSUJdz1fdRyhs6uGOyEo\r\n"[m
[32m+[m[32m"+EOq8At9TfnfhTNKO//kA1klYqHp2pJjApO9+d9uxlen0uZ7NxSpumlxDMVPZv5n\r\n"[m
[32m+[m[32m"ZlyN1wRN2PMLwAt9SetolCj2MQ8NKgNwp5f5OJA21Es5S1OlLDJy8kGGMhM8QC0/\r\n"[m
[32m+[m[32m"6GPTjIqDedMg9rzNlz6UkU48dI2a+inexKX34eIGVeZsQQ9gO5DeOoTvOnd5JwAj\r\n"[m
[32m+[m[32m"VWbKgQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBh\r\n"[m
[32m+[m[32m"Pjlxf7FQ3XGXzdypS3KWChLBGP01teCXG3ZYIo3NdVEPugQAlGpG1TrFrOp9nOxv\r\n"[m
[32m+[m[32m"GbbxKwbpu8tJJDQLVb0CGSQZhbvkpID01pCCfoFcm4nUFe06t6I3WUDbtBglkC6u\r\n"[m
[32m+[m[32m"gvmoDJ29x4xUhe0H0XAd7qGSvRKXg02enrcBtValHzFuoUhopE8c+rA4J0cS61Wj\r\n"[m
[32m+[m[32m"RffjGLrXhTwfLB5eOHVegIr9HIRPm++Ft3mJ10Pr1PvFUVuEbw4GMlQT5KfiIC24\r\n"[m
[32m+[m[32m"+i0J+I/dARk5zCPA0TkZmvd8U2O/6r4Em68+bh53yLkLeOkOYqdR2x7AY01NFP/K\r\n"[m
[32m+[m[32m"RH8V5PqYHj1YwrZaZGjQ\r\n"[m
[32m+[m[32m"-----END CERTIFICATE-----\r\n";[m
[32m+[m
[32m+[m[32mstatic char g_priKeyFile[] =[m
[32m+[m[32m"-----BEGIN RSA PRIVATE KEY-----"[m
[32m+[m[32m"MIIEowIBAAKCAQEAqVzrf6PkLu0uhp5yl2HPNm0vLyI1KLqgsdz5s+JvVdbPXNxD"[m
[32m+[m[32m"g6fmdwa64tJXZPKx7i1KwNs/Jx3xv1N6rqB0au+Ku0Zdq7zbMCqej63SbFW1XWvQ"[m
[32m+[m[32m"6RJ76GcitgrFMTlQN4AzfX0xLFaUJHRuDS4QC5UE9CmV3kD09BNgItu/hxPAHSwg"[m
[32m+[m[32m"q6myc1uufYCwCUIV3bzxd65M343zubTlwOSmsCSqQIl8C1Gd6NWT69tL4fq2hHc/"[m
[32m+[m[32m"09VAlcLvugztwM6NHwDCmRFEDz3RdRahAvCEde8OkY/Aor6UucYWzCJofLeyKVQg"[m
[32m+[m[32m"6J3CTsT/zUE6pdKTvuhQbpRCtWKWSa7qDv1WywIDAQABAoIBAFGpbCPvcmbuFjDy"[m
[32m+[m[32m"1W4Iy1EC9G1VoSwyUKlyUzRZSjWpjfLIggVJP+bEZ/hWU61pGEIvtIupK5pA5f/K"[m
[32m+[m[32m"0KzC0V9+gPYrx563QTjIVAwTVBLIgNq60dCQCQ7WK/Z62voRGIyqVCl94+ftFyE8"[m
[32m+[m[32m"wpO4UiRDhk/0fT7dMz882G32ZzNJmY9eHu+yOaRctJW2gRBROHpQfDGBCz7w8s2j"[m
[32m+[m[32m"ulIcnvwGOrvVllsL+vgY95M0LOq0W8ObbUSlawTnNTSRxFL68Hz5EaVJ19EYvEcC"[m
[32m+[m[32m"eWnpEqIfF8OhQ+mYbdrAutXCkqJLz3rdu5P2Lbk5Ht5ETfr7rtUzvb4+ExIcxVOs"[m
[32m+[m[32m"eys8EgECgYEA29tTxJOy2Cb4DKB9KwTErD1sFt9Ed+Z/A3RGmnM+/h75DHccqS8n"[m
[32m+[m[32m"g9DpvHVMcMWYFVYGlEHC1F+bupM9CgxqQcVhGk/ysJ5kXF6lSTnOQxORnku3HXnV"[m
[32m+[m[32m"4QzgKtLfHbukW1Y2RZM3aCz+Hg+bJrpacWyWZ4tRWNYsO58JRaubZjsCgYEAxTSP"[m
[32m+[m[32m"yUBleQejl5qO76PGUUs2W8+GPr492NJGb63mEiM1zTYLVN0uuDJ2JixzHb6o1NXZ"[m
[32m+[m[32m"6i00pSksT3+s0eiBTRnF6BJ0y/8J07ZnfQQXRAP8ypiZtd3jdOnUxEHfBw2QaIdP"[m
[32m+[m[32m"tVdUc2mpIhosAYT9sWpHYvlUqTCdeLwhkYfgeLECgYBoajjVcmQM3i0OKiZoCOKy"[m
[32m+[m[32m"/pTYI/8rho+p/04MylEPdXxIXEWDYD6/DrgDZh4ArQc2kt2bCcRTAnk+WfEyVYUd"[m
[32m+[m[32m"aXVdfry+/uqhJ94N8eMw3hlZeZIk8JkQQgIwtGd8goJjUoWB85Hr6vphIn5IHVcY"[m
[32m+[m[32m"6T5hPLxMmaL2SeioawDpwwKBgQCFXjDH6Hc3zQTEKND2HIqou/b9THH7yOlG056z"[m
[32m+[m[32m"NKZeKdXe/OfY8uT/yZDB7FnGCgVgO2huyTfLYvcGpNAZ/eZEYGPJuYGn3MmmlruS"[m
[32m+[m[32m"fsvFQfUahu2dY3zKusEcIXhV6sR5DNnJSFBi5VhvKcgNFwYDkF7K/thUu/4jgwgo"[m
[32m+[m[32m"xf33YQKBgDQffkP1jWqT/pzlVLFtF85/3eCC/uedBfxXknVMrWE+CM/Vsx9cvBZw"[m
[32m+[m[32m"hi15LA5+hEdbgvj87hmMiCOc75e0oz2Rd12ZoRlBVfbncH9ngfqBNQElM7Bueqoc"[m
[32m+[m[32m"JOpKV+gw0gQtiu4beIdFnYsdZoZwrTjC4rW7OI0WYoLJabMFFh3I"[m
[32m+[m[32m"-----END RSA PRIVATE KEY-----";[m
[32m+[m
[32m+[m[32mTLSConnectOptions BaseOption()[m
[32m+[m[32m{[m
[32m+[m[32m    TLSSecureOptions secureOption;[m
[32m+[m[32m    SecureData structureData(g_priKeyFile);[m
[32m+[m[32m    secureOption.SetKey(structureData);[m
[32m+[m[32m    std::vector<std::string> caChain;[m
[32m+[m[32m    caChain.push_back(g_caCrtFile);[m
[32m+[m[32m    secureOption.SetCaChain(caChain);[m
[32m+[m[32m    secureOption.SetCert(g_clientFile);[m
[32m+[m
[32m+[m[32m    TLSConnectOptions connectOptions;[m
[32m+[m[32m    connectOptions.SetTlsSecureOptions(secureOption);[m
[32m+[m
[32m+[m[32m    NetAddress netAddress;[m
[32m+[m[32m    netAddress.SetAddress(IP_ADDRESS);[m
[32m+[m[32m    netAddress.SetPort(0);[m
[32m+[m[32m    netAddress.SetFamilyBySaFamily(AF_INET);[m
[32m+[m[32m    connectOptions.SetNetAddress(netAddress);[m
[32m+[m
[32m+[m[32m    return connectOptions;[m
[32m+[m[32m}[m
[32m+[m[32m} // namespace[m
[32m+[m
[32m+[m[32mclass TlsSocketBranchTest : public testing::Test {[m
[32m+[m[32mpublic:[m
[32m+[m[32m    static void SetUpTestCase() {}[m
[32m+[m
[32m+[m[32m    static void TearDownTestCase() {}[m
[32m+[m
[32m+[m[32m    virtual void SetUp() {}[m
[32m+[m
[32m+[m[32m    virtual void TearDown() {}[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mHWTEST_F(TlsSocketBranchTest, BranchTest1, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    TLSSecureOptions secureOption;[m
[32m+[m[32m    SecureData structureData(g_priKeyFile);[m
[32m+[m[32m    secureOption.SetKey(structureData);[m
[32m+[m
[32m+[m[32m    SecureData keyPass(KEY_PASS);[m
[32m+[m[32m    secureOption.SetKeyPass(keyPass);[m
[32m+[m[32m    SecureData secureData = secureOption.GetKey();[m
[32m+[m[32m    EXPECT_EQ(structureData.Length(), strlen(g_priKeyFile));[m
[32m+[m[32m    std::vector<std::string> caChain;[m
[32m+[m[32m    caChain.push_back(g_caCrtFile);[m
[32m+[m[32m    secureOption.SetCaChain(caChain);[m
[32m+[m[32m    std::vector<std::string> getCaChain = secureOption.GetCaChain();[m
[32m+[m[32m    EXPECT_NE(getCaChain.data(), nullptr);[m
[32m+[m
[32m+[m[32m    secureOption.SetCert(g_clientFile);[m
[32m+[m[32m    std::string getCert = secureOption.GetCert();[m
[32m+[m[32m    EXPECT_NE(getCert.data(), nullptr);[m
[32m+[m
[32m+[m[32m    std::vector<std::string> protocolVec = {PROTOCOL_V_1_2, PROTOCOL_V_1_3};[m
[32m+[m[32m    secureOption.SetProtocolChain(protocolVec);[m
[32m+[m[32m    std::vector<std::string> getProtocol;[m
[32m+[m[32m    getProtocol = secureOption.GetProtocolChain();[m
[32m+[m
[32m+[m[32m    TLSSecureOptions copyOption = TLSSecureOptions(secureOption);[m
[32m+[m[32m    TLSSecureOptions equalOption = secureOption;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHWTEST_F(TlsSocketBranchTest, BranchTest2, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    TLSSecureOptions secureOption;[m
[32m+[m[32m    secureOption.SetUseRemoteCipherPrefer(false);[m
[32m+[m[32m    bool isUseRemoteCipher = secureOption.UseRemoteCipherPrefer();[m
[32m+[m[32m    EXPECT_FALSE(isUseRemoteCipher);[m
[32m+[m
[32m+[m[32m    secureOption.SetSignatureAlgorithms(SIGNATURE_ALGORITHM);[m
[32m+[m[32m    std::string getSignatureAlgorithm = secureOption.GetSignatureAlgorithms();[m
[32m+[m[32m    EXPECT_STREQ(getSignatureAlgorithm.data(), SIGNATURE_ALGORITHM);[m
[32m+[m
[32m+[m[32m    secureOption.SetCipherSuite(CIPHER_SUITE);[m
[32m+[m[32m    std::string getCipherSuite = secureOption.GetCipherSuite();[m
[32m+[m[32m    EXPECT_STREQ(getCipherSuite.data(), CIPHER_SUITE);[m
[32m+[m
[32m+[m[32m    TLSSecureOptions copyOption = TLSSecureOptions(secureOption);[m
[32m+[m[32m    TLSSecureOptions equalOption = secureOption;[m
[32m+[m
[32m+[m[32m    TLSConnectOptions connectOptions;[m
[32m+[m[32m    connectOptions.SetTlsSecureOptions(secureOption);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHWTEST_F(TlsSocketBranchTest, BranchTest3, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    TLSSecureOptions secureOption;[m
[32m+[m[32m    TLSConnectOptions connectOptions;[m
[32m+[m[32m    connectOptions.SetTlsSecureOptions(secureOption);[m
[32m+[m
[32m+[m[32m    NetAddress netAddress;[m
[32m+[m[32m    netAddress.SetAddress(IP_ADDRESS);[m
[32m+[m[32m    netAddress.SetPort(PORT);[m
[32m+[m[32m    connectOptions.SetNetAddress(netAddress);[m
[32m+[m[32m    NetAddress getNetAddress = connectOptions.GetNetAddress();[m
[32m+[m[32m    std::string address = getNetAddress.GetAddress();[m
[32m+[m[32m    EXPECT_STREQ(IP_ADDRESS, address.data());[m
[32m+[m[32m    int port = getNetAddress.GetPort();[m
[32m+[m[32m    EXPECT_EQ(port, PORT);[m
[32m+[m[32m    netAddress.SetFamilyBySaFamily(AF_INET6);[m
[32m+[m[32m    sa_family_t getFamily = netAddress.GetSaFamily();[m
[32m+[m[32m    EXPECT_EQ(getFamily, AF_INET6);[m
[32m+[m
[32m+[m[32m    std::vector<std::string> alpnProtocols;[m
[32m+[m[32m    alpnProtocols.push_back(ALPN_PROTOCOL);[m
[32m+[m[32m    connectOptions.SetAlpnProtocols(alpnProtocols);[m
[32m+[m[32m    std::vector<std::string> getAlpnProtocols;[m
[32m+[m[32m    getAlpnProtocols = connectOptions.GetAlpnProtocols();[m
[32m+[m[32m    EXPECT_STREQ(getAlpnProtocols[0].data(), alpnProtocols[0].data());[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHWTEST_F(TlsSocketBranchTest, BranchTest4, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    TLSSecureOptions secureOption;[m
[32m+[m[32m    SecureData structureData(g_priKeyFile);[m
[32m+[m[32m    secureOption.SetKey(structureData);[m
[32m+[m[32m    std::vector<std::string> caChain;[m
[32m+[m[32m    caChain.push_back(g_caCrtFile);[m
[32m+[m[32m    secureOption.SetCaChain(caChain);[m
[32m+[m[32m    secureOption.SetCert(g_clientFile);[m
[32m+[m
[32m+[m[32m    TLSConnectOptions connectOptions;[m
[32m+[m[32m    connectOptions.SetTlsSecureOptions(secureOption);[m
[32m+[m
[32m+[m[32m    NetAddress netAddress;[m
[32m+[m[32m    netAddress.SetAddress(IP_ADDRESS);[m
[32m+[m[32m    netAddress.SetPort(0);[m
[32m+[m[32m    netAddress.SetFamilyBySaFamily(AF_INET);[m
[32m+[m
[32m+[m[32m    TLSSocket tlsSocket;[m
[32m+[m[32m    tlsSocket.Bind(netAddress, [](int32_t errCode) { EXPECT_EQ(errCode, TLSSOCKET_SUCCESS); });[m
[32m+[m[32m    SocketStateBase TlsSocketstate;[m
[32m+[m[32m    tlsSocket.GetState([&TlsSocketstate](int32_t errCode, const SocketStateBase &state) {[m
[32m+[m[32m        EXPECT_EQ(errCode, TLSSOCKET_SUCCESS);[m
[32m+[m[32m        TlsSocketstate = state;[m
[32m+[m[32m        EXPECT_TRUE(TlsSocketstate.IsBound());[m
[32m+[m[32m    });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHWTEST_F(TlsSocketBranchTest, BranchTest5, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    TLSConnectOptions tlsConnectOptions = BaseOption();[m
[32m+[m
[32m+[m[32m    TLSSocket tlsSocket;[m
[32m+[m[32m    tlsSocket.Bind(tlsConnectOptions.GetNetAddress(), [](int32_t errCode) { EXPECT_EQ(errCode, TLSSOCKET_SUCCESS); });[m
[32m+[m[32m    tlsSocket.OnError([](int32_t errorNumber, const std::string &errorString) {[m
[32m+[m[32m        EXPECT_EQ(TLSSOCKET_ERROR_SSL_NULL, errorNumber);[m
[32m+[m[32m    });[m
[32m+[m[32m    tlsSocket.Connect(tlsConnectOptions, [](int32_t errCode) { EXPECT_EQ(TLSSOCKET_ERROR_SSL_NULL, errCode); });[m
[32m+[m[32m    std::string getData;[m
[32m+[m[32m    tlsSocket.OnMessage([&getData](const std::string &data, const SocketRemoteInfo &remoteInfo) {[m
[32m+[m[32m        EXPECT_STREQ(getData.data(), nullptr);[m
[32m+[m[32m    });[m
[32m+[m[32m    const std::string data = "how do you do?";[m
[32m+[m[32m    TCPSendOptions tcpSendOptions;[m
[32m+[m[32m    tcpSendOptions.SetData(data);[m
[32m+[m[32m    tlsSocket.Send(tcpSendOptions, [](int32_t errCode) { EXPECT_EQ(errCode, TLSSOCKET_ERROR_SSL_NULL); });[m
[32m+[m[32m    tlsSocket.GetSignatureAlgorithms([](int32_t errCode, const std::vector<std::string> &algorithms) {[m
[32m+[m[32m        EXPECT_EQ(errCode, TLSSOCKET_ERROR_SSL_NULL);[m
[32m+[m[32m    });[m
[32m+[m[32m    tlsSocket.GetCipherSuite([](int32_t errCode, const std::vector<std::string> &suite) {[m
[32m+[m[32m        EXPECT_EQ(errCode, TLSSOCKET_ERROR_SSL_NULL);[m
[32m+[m[32m    });[m
[32m+[m[32m    tlsSocket.GetProtocol([](int32_t errCode, const std::string &protocol) {[m
[32m+[m[32m        EXPECT_EQ(errCode, TLSSOCKET_SUCCESS);[m
[32m+[m[32m    });[m
[32m+[m[32m    (void)tlsSocket.Close([](int32_t errCode) { EXPECT_FALSE(errCode == TLSSOCKET_SUCCESS); });[m
[32m+[m[32m}[m
[32m+[m[32m} // namespace NetStack[m
[32m+[m[32m} // namespace OHOS[m
\ No newline at end of file[m
[1mdiff --git a/test/unittest/utils/common_utils/BUILD.gn b/test/unittest/utils/common_utils/BUILD.gn[m
[1mindex e69de29..1570e62 100644[m
[1m--- a/test/unittest/utils/common_utils/BUILD.gn[m
[1m+++ b/test/unittest/utils/common_utils/BUILD.gn[m
[36m@@ -0,0 +1,47 @@[m
[32m+[m[32m# Copyright (c) 2022 Huawei Device Co., Ltd.[m
[32m+[m[32m# Licensed under the Apache License, Version 2.0 (the "License");[m
[32m+[m[32m# you may not use this file except in compliance with the License.[m
[32m+[m[32m# You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#     http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing, software[m
[32m+[m[32m# distributed under the License is distributed on an "AS IS" BASIS,[m
[32m+[m[32m# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[m
[32m+[m[32m# See the License for the specific language governing permissions and[m
[32m+[m[32m# limitations under the License.[m
[32m+[m
[32m+[m[32mimport("//build/ohos.gni")[m
[32m+[m[32mimport("//build/test.gni")[m
[32m+[m[32mimport("//foundation/communication/netstack/netstack_config.gni")[m
[32m+[m
[32m+[m[32mNETSTACK_UTILS_ROOT = "$SUBSYSTEM_DIR/netstack/utils"[m
[32m+[m
[32m+[m[32mutils_include = [ "$NETSTACK_UTILS_ROOT/log/include" ][m
[32m+[m
[32m+[m[32mcommon_external_deps = [[m
[32m+[m[32m  "c_utils:utils",[m
[32m+[m[32m  "hiviewdfx_hilog_native:libhilog",[m
[32m+[m[32m][m
[32m+[m
[32m+[m[32mohos_unittest("netstack_common_utils_test") {[m
[32m+[m[32m  module_out_path = "netstack/utils_unittest"[m
[32m+[m
[32m+[m[32m  include_dirs = [ "$NETSTACK_UTILS_ROOT/common_utils/include" ][m
[32m+[m[32m  include_dirs += utils_include[m
[32m+[m
[32m+[m[32m  external_deps = common_external_deps[m
[32m+[m
[32m+[m[32m  sources = [[m
[32m+[m[32m    "$NETSTACK_UTILS_ROOT/common_utils/src/netstack_common_utils.cpp",[m
[32m+[m[32m    "NetStackCommonUtilsTest.cpp",[m
[32m+[m[32m  ][m
[32m+[m
[32m+[m[32m  part_name = "netstack"[m
[32m+[m[32m  subsystem_name = "communication"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mgroup("unittest") {[m
[32m+[m[32m  testonly = true[m
[32m+[m[32m  deps = [ ":netstack_common_utils_test" ][m
[32m+[m[32m}[m
[1mdiff --git a/test/unittest/utils/common_utils/NetStackCommonUtilsTest.cpp b/test/unittest/utils/common_utils/NetStackCommonUtilsTest.cpp[m
[1mindex 98d4d03..eefba7a 100644[m
[1m--- a/test/unittest/utils/common_utils/NetStackCommonUtilsTest.cpp[m
[1m+++ b/test/unittest/utils/common_utils/NetStackCommonUtilsTest.cpp[m
[36m@@ -1,3 +1,80 @@[m
[31m-//[m
[31m-// Created by ts on 2022/12/3.[m
[31m-//[m
[32m+[m[32m/*[m
[32m+[m[32m * Copyright (c) 2022 Huawei Device Co., Ltd.[m
[32m+[m[32m * Licensed under the Apache License, Version 2.0 (the "License");[m
[32m+[m[32m * you may not use this file except in compliance with the License.[m
[32m+[m[32m * You may obtain a copy of the License at[m
[32m+[m[32m *[m
[32m+[m[32m *     http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m *[m
[32m+[m[32m * Unless required by applicable law or agreed to in writing, software[m
[32m+[m[32m * distributed under the License is distributed on an "AS IS" BASIS,[m
[32m+[m[32m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[m
[32m+[m[32m * See the License for the specific language governing permissions and[m
[32m+[m[32m * limitations under the License.[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m#include <gtest/gtest.h>[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32m#include "netstack_common_utils.h"[m
[32m+[m
[32m+[m[32mnamespace OHOS {[m
[32m+[m[32mnamespace NetStack {[m
[32m+[m[32mnamespace CommonUtils {[m
[32m+[m[32mnamespace {[m
[32m+[m[32musing namespace testing::ext;[m
[32m+[m[32mstatic constexpr const char SPACE = ' ';[m
[32m+[m[32mstatic constexpr const char *STATUS_LINE_COMMA = ",";[m
[32m+[m[32mstatic constexpr const char *STATUS_LINE_SEP = " ";[m
[32m+[m[32mstatic constexpr const size_t STATUS_LINE_ELEM_NUM = 2;[m
[32m+[m[32m} // namespace[m
[32m+[m
[32m+[m[32mclass NetStackCommonUtilsTest : public testing::Test {[m
[32m+[m[32mpublic:[m
[32m+[m[32m    static void SetUpTestCase() {}[m
[32m+[m
[32m+[m[32m    static void TearDownTestCase() {}[m
[32m+[m
[32m+[m[32m    virtual void SetUp() {}[m
[32m+[m
[32m+[m[32m    virtual void TearDown() {}[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mHWTEST_F(NetStackCommonUtilsTest, CommonUtils, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    std::string str = "The,weather,is,fine,today";[m
[32m+[m[32m    std::vector<std::string> subStr = Split(str, STATUS_LINE_COMMA);[m
[32m+[m[32m    EXPECT_STREQ(subStr[0].data(), "The");[m
[32m+[m[32m    EXPECT_STREQ(subStr[1].data(), "weather");[m
[32m+[m[32m    EXPECT_STREQ(subStr[2].data(), "is");[m
[32m+[m[32m    EXPECT_STREQ(subStr[3].data(), "fine");[m
[32m+[m[32m    EXPECT_STREQ(subStr[4].data(), "today");[m
[32m+[m[32m    EXPECT_EQ(subStr.size(), 5);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHWTEST_F(NetStackCommonUtilsTest, CommonUtils1, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    std::string str = " The weather is fine today";[m
[32m+[m[32m    std::string subStr = Strip(str, SPACE);[m
[32m+[m[32m    EXPECT_STREQ(subStr.data(), "The weather is fine today");[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHWTEST_F(NetStackCommonUtilsTest, CommonUtils2, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    std::string str = "HOWDOYOUDO";[m
[32m+[m[32m    std::string strLower = ToLower(str);[m
[32m+[m[32m    EXPECT_STREQ(strLower.data(), "howdoyoudo");[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mHWTEST_F(NetStackCommonUtilsTest, CommonUtils3, TestSize.Level2)[m
[32m+[m[32m{[m
[32m+[m[32m    std::string str = "fine today";[m
[32m+[m[32m    std::vector<std::string> strList = Split(str, STATUS_LINE_SEP, STATUS_LINE_ELEM_NUM);;[m
[32m+[m
[32m+[m[32m    EXPECT_STREQ(strList[0].data(), "fine");[m
[32m+[m[32m    EXPECT_STREQ(strList[1].data(), "today");[m
[32m+[m[32m    EXPECT_EQ(strList.size(), 2);[m
[32m+[m[32m}[m
[32m+[m[32m} // namespace CommonUtils[m
[32m+[m[32m} // namespace NetStack[m
[32m+[m[32m} // namespace OHOS[m
\ No newline at end of file[m
