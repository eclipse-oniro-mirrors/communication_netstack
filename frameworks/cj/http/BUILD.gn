# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/communication/netstack/netstack_config.gni")

config("http_ffi_config") {
  include_dirs = [
    "include",
    "$NETSTACK_DIR/utils/common_utils/include",
  ]
  if (defined(global_parts_info) &&
      defined(global_parts_info.communication_netmanager_base) &&
      global_parts_info.communication_netmanager_base) {
    include_dirs += [ "$NETSTACK_DIR/utils/http_over_curl/include" ]
  }
  defines = []

  cflags_cc = [ "-fvisibility=hidden" ]

  if (is_mingw || is_mac) {
    cflags = [
      "-std=c++17",
      "-stdlib=libc++",
    ]
  }
  if (is_mingw) {
    defines += [ "WINDOWS_PLATFORM" ]
  } else if (is_mac) {
    defines += [ "MAC_PLATFORM" ]
    cflags_cc += [
      "-fstack-protector-strong",
      "-D_FORTIFY_SOURCE=2",
      "-O2",
    ]
  } else if (product_name != "ohos-sdk") {
    defines += [ "HTTP_PROXY_ENABLE" ]
    cflags_cc += [
      "-fstack-protector-strong",
      "-D_FORTIFY_SOURCE=2",
      "-O2",
    ]
  }

  if (current_os == "ohos") {
    defines += [ "OHOS_PLATFORM" ]
  }

  if (product_name != "ohos-sdk") {
    defines += [ "HTTP_MULTIPATH_CERT_ENABLE" ]
  }
}

ohos_shared_library("cj_net_http_ffi") {
  if (product_name != "ohos-sdk") {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
    }
  }

  branch_protector_ret = "pac_ret"

  sources = [
    "src/lru_cache_disk_handler.cpp",
    "src/net_http_cache_entity.cpp",
    "src/net_http_cache_proxy.cpp",
    "src/net_http_cache_strategy.cpp",
    "src/net_http_client_exec.cpp",
    "src/net_http_ffi.cpp",
    "src/net_http_request.cpp",
    "src/net_http_request_context.cpp",
    "src/net_http_response.cpp",
    "src/net_http_utils.cpp",
  ]

  configs = [ ":http_ffi_config" ]

  if (product_name == "ohos-sdk") {
    defines += [ "PREVIEWER" ]
    sources = [ "src/net_http_mock.cpp" ]
  }

  external_deps = [
    "c_utils:utils",
    "napi:cj_bind_ffi",
    "napi:cj_bind_native",
  ]

  if (is_mingw || is_mac) {
    sources +=
        [ "$NETSTACK_DIR/utils/common_utils/src/netstack_common_utils.cpp" ]
    deps = [
      "$THIRD_PARTY_ROOT/bounds_checking_function:libsec_static",
      "$THIRD_PARTY_ROOT/curl:curl_shared",
      "$THIRD_PARTY_ROOT/jsoncpp:jsoncpp_static",
    ]
    external_deps += [ "cJSON:cjson" ]
    ldflags = [ "-lpthread" ]
  } else {
    deps = [ "$NETSTACK_DIR/utils:stack_utils_common" ]
    external_deps += [
      "cJSON:cjson",
      "curl:curl_shared_http3",
      "hilog:libhilog",
      "hitrace:hitrace_meter",
      "jsoncpp:jsoncpp",
    ]
    if (netstack_http_boringssl) {
      deps += [
        "//vendor/open_source/boringssl:crypto_boringssl",
        "//vendor/open_source/boringssl:ssl_boringssl",
      ]
    } else {
      external_deps += [
        "openssl:libcrypto_shared",
        "openssl:libssl_shared",
      ]
    }
    if (defined(global_parts_info) &&
        defined(global_parts_info.communication_netmanager_base) &&
        global_parts_info.communication_netmanager_base) {
      external_deps += [ "netmanager_base:net_conn_manager_if" ]
      defines = [ "HAS_NETMANAGER_BASE=1" ]
      sources += [
        "$NETSTACK_DIR/utils/http_over_curl/src/epoll_multi_driver.cpp",
        "$NETSTACK_DIR/utils/http_over_curl/src/epoll_request_handler.cpp",
      ]
    } else {
      defines = [ "HAS_NETMANAGER_BASE=0" ]
    }
    if (product_name != "ohos-sdk") {
      external_deps += [ "init:libbegetutil" ]
    }
  }
  cflags = [
    "-fstack-protector-strong",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]

  innerapi_tags = [ "platformsdk" ]
  part_name = "netstack"
  subsystem_name = "communication"
}
