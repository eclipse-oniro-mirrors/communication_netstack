# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/communication/netstack/netstack_config.gni")

config("http_config") {
  include_dirs = [
    "async_context/include",
    "async_work/include",
    "cache/base64/include",
    "cache/cache_constant/include",
    "cache/cache_proxy/include",
    "cache/cache_strategy/include",
    "cache/lru_cache/include",
    "cache/md5/include",
    "constant/include",
    "http_exec/include",
    "http_module/include",
    "options/include",
    "//third_party/curl/include",
    "//third_party/glib/glib",
    "//third_party/glib",
    "$SUBSYSTEM_DIR/netstack/utils/common_utils/include",
  ]

  if (current_os != "ohos") {
    defines = [ "__STDC_WANT_LIB_EXT1__=1" ]
    cflags = [ "-std=c++17" ]
  }
}

ohos_shared_library("http") {
  sources = [
    "async_context/src/request_context.cpp",
    "async_work/src/http_async_work.cpp",
    "cache/base64/src/base64_utils.cpp",
    "cache/cache_proxy/src/cache_proxy.cpp",
    "cache/cache_strategy/src/http_cache_request.cpp",
    "cache/cache_strategy/src/http_cache_response.cpp",
    "cache/cache_strategy/src/http_cache_strategy.cpp",
    "cache/cache_strategy/src/http_time.cpp",
    "cache/lru_cache/src/disk_handler.cpp",
    "cache/lru_cache/src/lru_cache.cpp",
    "cache/lru_cache/src/lru_cache_disk_handler.cpp",
    "cache/md5/src/calculate_md5.cpp",
    "constant/src/constant.cpp",
    "http_exec/src/http_exec.cpp",
    "http_module/src/http_module.cpp",
    "options/src/http_request_options.cpp",
    "options/src/http_response.cpp",
  ]

  configs = [ ":http_config" ]

  deps = [ "//third_party/curl:curl_shared" ]
  external_deps = [ "napi:ace_napi" ]

  if (current_os == "ohos") {
    deps += [
      "$NETSTACK_DIR/utils/napi_utils:napi_utils",
      "//third_party/glib:glib_packages",
      "//third_party/jsoncpp:jsoncpp",
      "//third_party/openssl:libcrypto_shared",
    ]
    external_deps += [
      "c_utils:utils",
      "hiviewdfx_hilog_native:libhilog",
    ]
  } else {
    deps += [
      "$NETSTACK_DIR/utils/napi_utils:napi_utils_static",
      "//third_party/jsoncpp:jsoncpp_static",
      "//third_party/openssl:libcrypto_static",
    ]
  }

  relative_install_dir = "module/net"
  part_name = "netstack"
  subsystem_name = "communication"
}

if (current_os != "ohos") {
  ohos_copy("copy_http_napi") {
    if (host_os == "mac") {
      suffix = ".dylib"
    } else {
      suffix = ".dll"
    }

    out_path = get_label_info(":http", "root_out_dir")
    deps = [ ":http" ]
    sources = [ "${out_path}/communication/netstack/libhttp${suffix}" ]
    outputs =
        [ target_out_dir + "/previewer/common/bin/module/net/libhttp${suffix}" ]
    module_source_dir = target_out_dir + "/previewer/common/bin/module/net/"
    module_install_name = ""
  }
}
